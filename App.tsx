
import React, { useState, useCallback, useEffect, useRef } from 'react';
import { CVStyle, CVType, GeneratedCv, CvRatingReport, LogEntry } from './types';
import { InputPanel } from './components/InputPanel';
import { CvDisplay } from './components/CvDisplay';
import { generateCv, refineCv, rateCv, formatRawInfo } from './services/geminiService';
import { Icon } from './components/Icon';
import { BestPracticesModal } from './components/BestPracticesModal';
import { RatingModal } from './components/RatingModal';
import { LogPanel } from './components/LogPanel';
import { TipsOverlay } from './components/TipsOverlay';
import html2canvas from 'html2canvas';

const TailwindSafelist: React.FC = () => {
    // These classes are dynamically generated by the AI based on the theme.
    // We include them here hidden so Tailwind's JIT compiler can find and generate them.
    const colors = ['indigo', 'teal', 'rose', 'slate', 'cyan', 'amber', 'green', 'blue', 'orange', 'emerald'];

    return (
        <div className="hidden">
            {colors.map(color => (
                <div key={color}>
                    <div className={`bg-${color}-100`}></div>
                    <div className={`bg-${color}-500`}></div>
                    <div className={`bg-${color}-600`}></div>
                    <div className={`text-${color}-600`}></div>
                    <div className={`text-${color}-700`}></div>
                    <div className={`text-${color}-800`}></div>
                    <div className={`border-${color}-200`}></div>
                    <div className={`border-${color}-500`}></div>
                    <div className={`from-${color}-500`}></div>
                    <div className={`to-${color}-500`}></div>
                    <div className={`to-${color}-600`}></div>
                </div>
            ))}
        </div>
    );
};


function App() {
  const [apiKey, setApiKey] = useState('');
  const [rawInfo, setRawInfo] = useState('');
  const [imageUrl, setImageUrl] = useState('https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?q=80&w=2576&auto=format&fit=crop');
  const [colorTheme, setColorTheme] = useState<string>('Indigo');
  const [generatedCvs, setGeneratedCvs] = useState<GeneratedCv[]>([]);
  const [activeCvIndex, setActiveCvIndex] = useState<number | null>(null);
  const [editPrompt, setEditPrompt] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isFormatting, setIsFormatting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isPracticesModalOpen, setIsPracticesModalOpen] = useState(false);
  const [isRating, setIsRating] = useState(false);
  const [ratingReport, setRatingReport] = useState<CvRatingReport | null>(null);
  const [isRatingModalOpen, setIsRatingModalOpen] = useState(false);
  const [logs, setLogs] = useState<LogEntry[]>([]);
  const [showTips, setShowTips] = useState(true);
  const [didGenerate, setDidGenerate] = useState(false);

  const MAX_INPUT_LENGTH = 28000;
  const NOTIFICATION_SOUND_URL = 'https://res.cloudinary.com/dy80ftu9k/video/upload/v1753917217/ding-126626_dfhzcv.mp3';
  
  const addLog = useCallback((message: string, type: 'info' | 'success' | 'error' = 'info') => {
    setLogs(prevLogs => [...prevLogs, { message, type, timestamp: new Date() }]);
  }, []);

  const handleFormat = useCallback(async () => {
    if (!rawInfo || !apiKey) return;
    setIsFormatting(true);
    addLog('Cleaning and formatting input...', 'info');
    setError(null);
    try {
        const formattedInfo = await formatRawInfo(apiKey, rawInfo);
        setRawInfo(formattedInfo);
        addLog('Input successfully formatted.', 'success');
    } catch (err: any) {
        const errorMsg = err.message || 'An error occurred during formatting.';
        setError(errorMsg);
        addLog(`Error during formatting: ${errorMsg}`, 'error');
    } finally {
        setIsFormatting(false);
    }
  }, [rawInfo, apiKey, addLog]);

  const handleGenerate = useCallback(async () => {
    if (!rawInfo || !apiKey) return;
    setIsLoading(true);
    setError(null);
    setGeneratedCvs([]);
    setActiveCvIndex(null);
    setLogs([]);
    setDidGenerate(false);
    addLog('Generation process started.');

    try {
      if (rawInfo.length > MAX_INPUT_LENGTH) {
        const errorMsg = `Input is too long (${rawInfo.length} characters). Max is ${MAX_INPUT_LENGTH}. Please use 'Format & Clean' to shorten it.`;
        setError(errorMsg);
        addLog(errorMsg, 'error');
        setIsLoading(false);
        return;
      }

      const stylesToGenerate = [CVStyle.Modern, CVStyle.Classic, CVStyle.Creative];
      const successfulGenerations: GeneratedCv[] = [];

      for (const style of stylesToGenerate) {
        try {
          addLog(`Generating ${style} style CV...`);
          const result = await generateCv(apiKey, rawInfo, imageUrl, style, CVType.Combination, colorTheme);
          successfulGenerations.push(result);
          setGeneratedCvs([...successfulGenerations]);
          setActiveCvIndex(successfulGenerations.length - 1);
          addLog(`${style} style CV generated successfully.`, 'success');
        } catch (err: any) {
           addLog(`Error generating ${style} CV: ${err.message}`, 'error');
           // Continue to the next style
        }
      }

      if (successfulGenerations.length === 0) {
        throw new Error("All CV generation attempts failed. Please check the logs for details.");
      } else {
        setDidGenerate(true);
      }

      addLog('All CVs generated!', 'success');
      const notificationSound = new Audio(NOTIFICATION_SOUND_URL);
      notificationSound.play().catch(e => console.error("Error playing sound:", e));

    } catch (err: any)
{
      setError(err.message || 'An unknown error occurred during generation.');
      addLog(`Critical failure during generation: ${err.message}`, 'error');
    } finally {
      setIsLoading(false);
    }
  }, [rawInfo, imageUrl, colorTheme, addLog, apiKey]);

  const handleRefine = useCallback(async () => {
    if (!editPrompt || activeCvIndex === null || !apiKey) return;
    
    const activeCv = generatedCvs[activeCvIndex];
    if (!activeCv) return;

    setIsLoading(true);
    setError(null);
    try {
      const refinedCvData = await refineCv(apiKey, activeCv.html, editPrompt, colorTheme, imageUrl);
      
      const updatedCvs = [...generatedCvs];
      updatedCvs[activeCvIndex] = refinedCvData;
      setGeneratedCvs(updatedCvs);
      setEditPrompt('');
    } catch (err: any) {
      setError(err.message || 'An unknown error occurred during refinement.');
    } finally {
      setIsLoading(false);
    }
  }, [editPrompt, generatedCvs, activeCvIndex, colorTheme, imageUrl, apiKey]);

  const handleRateCv = useCallback(async () => {
    if (activeCvIndex === null || !apiKey) return;
    const activeCv = generatedCvs[activeCvIndex];
    if (!activeCv) return;

    const cvWrapper = document.getElementById('cv-content-wrapper');
    const cvElement = cvWrapper?.firstChild as HTMLElement;

    if (!cvElement) {
      setError("Cannot rate CV. The CV content is not available.");
      return;
    }
    
    setIsRating(true);
    setError(null);
    setRatingReport(null);

    try {
        const originalBg = cvElement.style.backgroundColor;
        cvElement.style.backgroundColor = '#ffffff';

        const canvas = await html2canvas(cvElement, { scale: 2, useCORS: true, logging: false });
        
        cvElement.style.backgroundColor = originalBg;
        const imageBase64 = canvas.toDataURL('image/png');

        const report = await rateCv(apiKey, activeCv.html, imageBase64);
        setRatingReport(report);
        setIsRatingModalOpen(true);
    } catch (err: any) {
        setError(err.message || 'An unknown error occurred during CV rating.');
    } finally {
        setIsRating(false);
    }
  }, [generatedCvs, activeCvIndex, apiKey]);

  const handleCvUpdate = useCallback((updatedCv: GeneratedCv) => {
    if (activeCvIndex === null) return;
    const updatedCvs = [...generatedCvs];
    updatedCvs[activeCvIndex] = updatedCv;
    setGeneratedCvs(updatedCvs);
  }, [generatedCvs, activeCvIndex]);


  return (
    <>
    <div className="min-h-screen flex flex-col font-sans text-gray-900 bg-gray-100">
      <header className="w-full bg-white border-b-2 border-black p-4 sticky top-0 z-30">
        <div className="max-w-screen-2xl mx-auto flex justify-between items-center">
          <div className="bg-yellow-300 p-2 border-2 border-black">
            <div className="flex items-center gap-3">
              <Icon path="M12 21v-8.25M15.75 21v-8.25M8.25 21v-8.25M3 9l9-6 9 6m-1.5 12V10.332A48.36 48.36 0 0012 9.75c-2.551 0-5.056.2-7.5.582V21M3 21h18M12 6.75h.008v.008H12V6.75z" className="w-8 h-8 text-indigo-600" />
              <h1 className="text-xl md:text-2xl font-bold tracking-tight text-gray-900">AI CV Architect</h1>
            </div>
          </div>
          <div className="flex items-center gap-3">
             <button
              onClick={() => setShowTips(!showTips)}
              className={`flex items-center gap-2 px-4 py-2 text-sm font-semibold border-2 border-black shadow-[4px_4px_0px_#000] hover:shadow-none hover:translate-x-1 hover:translate-y-1 transition-all ${showTips ? 'bg-indigo-100 text-indigo-800' : 'bg-white text-black'}`}
            >
              <Icon path="M12 18v-5.25m0 0a3 3 0 00-3-3 3 3 0 00-3 3.002v5.248a3 3 0 003 3.002 3 3 0 003-3.002zM12 3.75a.75.75 0 01.75.75v1.5a.75.75 0 01-1.5 0v-1.5A.75.75 0 0112 3.75zM8.25 5.625a.75.75 0 01.75-.75h1.5a.75.75 0 010 1.5h-1.5a.75.75 0 01-.75-.75zM15.75 5.625a.75.75 0 01.75-.75h1.5a.75.75 0 010 1.5h-1.5a.75.75 0 01-.75-.75zM4.125 10.125a.75.75 0 01.75-.75h1.5a.75.75 0 010 1.5h-1.5a.75.75 0 01-.75-.75zM19.875 10.125a.75.75 0 01.75-.75h1.5a.75.75 0 010 1.5h-1.5a.75.75 0 01-.75-.75z" className="w-5 h-5"/>
              <span>Tips {showTips ? 'ON' : 'OFF'}</span>
            </button>
            <button
              onClick={() => setIsPracticesModalOpen(true)}
              className="flex items-center gap-2 px-4 py-2 text-sm font-semibold text-black bg-white border-2 border-black shadow-[4px_4px_0px_#000] hover:shadow-none hover:translate-x-1 hover:translate-y-1 transition-all"
            >
              <Icon path="M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z" className="w-5 h-5"/>
              <span>Best Practices</span>
            </button>
          </div>
        </div>
      </header>
      
      <main className="flex-grow grid grid-cols-1 lg:grid-cols-12 gap-0">
        <div className="lg:col-span-3">
          <InputPanel
            apiKey={apiKey}
            setApiKey={setApiKey}
            rawInfo={rawInfo}
            setRawInfo={setRawInfo}
            imageUrl={imageUrl}
            setImageUrl={setImageUrl}
            colorTheme={colorTheme}
            setColorTheme={setColorTheme}
            handleGenerate={handleGenerate}
            isLoading={isLoading}
            isFormatting={isFormatting}
            handleFormat={handleFormat}
          />
        </div>
        <div className="lg:col-span-8">
          <CvDisplay
            generatedCvs={generatedCvs}
            activeCvIndex={activeCvIndex}
            setActiveCvIndex={setActiveCvIndex}
            editPrompt={editPrompt}
            setEditPrompt={setEditPrompt}
            handleRefine={handleRefine}
            isLoading={isLoading}
            error={error}
            onCvUpdate={handleCvUpdate}
            handleRateCv={handleRateCv}
            isRating={isRating}
          />
        </div>
        <div className="lg:col-span-1">
          <LogPanel logs={logs} />
        </div>
      </main>

      <div className="lg:hidden text-center p-2 bg-yellow-200 text-yellow-800 border-t-2 border-yellow-300">
        <p className="text-sm font-semibold">For the best experience, please use a desktop browser.</p>
      </div>
    </div>
    <TailwindSafelist />
    {isPracticesModalOpen && <BestPracticesModal onClose={() => setIsPracticesModalOpen(false)} />}
    {isRatingModalOpen && (
      <RatingModal
        report={ratingReport}
        isLoading={isRating && !ratingReport}
        onClose={() => setIsRatingModalOpen(false)}
      />
    )}
    {showTips && didGenerate && !isLoading && generatedCvs.length > 0 && (
      <TipsOverlay onClose={() => setShowTips(false)} />
    )}
    </>
  );
}

export default App;
